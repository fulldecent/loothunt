{"version":3,"file":"static/webpack/static/development/pages/_app.js.d4801e3c210f40ec6b69.hot-update.js","sources":["webpack:///./eth/index.js"],"sourcesContent":["import ETH from './eth'\nimport { abiUtils, orderUtils } from '../utils'\nimport { CONTRACT_ADDRESSES } from '../utils/constants'\n\nclass ETHWrapper extends ETH {\n  async signZeroExTransaction(order, orderSignature) {\n    try {\n      const tx = {\n        salt: orderUtils.genSalt(),\n        signerAddress: this.currentProvider.selectedAddress,\n        data: abiUtils.encodeFunctionCall('fillOrder', [order, '0x01', orderSignature]),\n      }\n      const { signature: txSignature } = await orderUtils.ecSignTx(this.currentProvider, tx)\n\n      return { tx, txSignature }\n    } catch (e) {\n      throw (e)\n    }\n  }\n\n  async sendExecuteTransaction(tx, signature) {\n    try {\n      const options = {\n        to: CONTRACT_ADDRESSES.REQUIREMENT_FILTER,\n        data: abiUtils.encodeFunctionCall(\n          'executeTransaction',\n          [tx.salt, tx.signerAddress, tx.data, signature],\n        ),\n      }\n      const { txHash, txInstance } = await this.send(options)\n\n      return { txHash, txInstance }\n    } catch (e) {\n      throw (e)\n    }\n  }\n\n  async getRequirementAchieved(order, hunter) {\n    try {\n      const options = {\n        to: CONTRACT_ADDRESSES.REQUIREMENT_FILTER,\n        data: abiUtils.encodeFunctionCall(\n          'getRequirementsAchieved',\n          [order.takerAssetData, hunter],\n        ),\n      }\n      const data = await this.call(options)\n      return abiUtils.decodeParameters('getRequirementsAchieved', data).requirementsAchieved\n    } catch (e) {\n      throw (e)\n    }\n  }\n\n  async getFilled(orderHash) {\n    try {\n      const options = {\n        to: CONTRACT_ADDRESSES.EXCHANGE,\n        data: abiUtils.encodeFunctionCall(\n          'filled',\n          [orderHash],\n        ),\n      }\n      const data = await this.call(options)\n      return abiUtils.decodeParameters('filled', data)[0]\n    } catch (e) {\n      throw (e)\n    }\n  }\n}\n\nconst eth = new ETHWrapper()\n\nexport default eth"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AACA;;;;;;;;AAEA;AACA;AACA;AACA;AAHA;;AAKA;AACA;;;AADA;AAEA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;AAEA;AACA;AACA;AAFA;;AAOA;AACA;;;AADA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;AAEA;AACA;AACA;AAFA;;AAOA;AACA;;AADA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;AAEA;AACA;AACA;AAFA;;AAOA;AACA;;AADA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AA5DA;AACA;AAiEA;AAEA;;;;A","sourceRoot":""}