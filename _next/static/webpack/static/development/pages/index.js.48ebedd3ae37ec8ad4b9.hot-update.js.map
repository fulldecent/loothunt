{"version":3,"file":"static/webpack/static/development/pages/index.js.48ebedd3ae37ec8ad4b9.hot-update.js","sources":["webpack:///./pages/index.jsx"],"sourcesContent":["import React, { Component } from 'react'\nimport { hexToNumber } from 'web3-utils'\n// Layouts\nimport Layout from '../layouts/Layout'\n// Components\nimport Missions from '../components/Missions/Missions'\n// Assets\nimport rawMissions from '../assets/missions/missions.json'\n// Utils\nimport eth from '../eth'\nimport abiUtils from '../utils/abiUtils'\n// Constants\nimport { NULL_ADDRESS } from '../utils/constants'\n\nclass IndexPage extends Component {\n  constructor() {\n    super()\n    this.state = {\n      missions: rawMissions.map(m => ({\n        ...abiUtils.decodeMission(m.order),\n        ...m,\n      }))\n    }\n  }\n\n  async componentWillReceiveProps(props) {\n    const { missions } = this.state\n    const newMissions = missions.map(m => ({ ...m, fetching: true }))\n\n    if (props.selectedAddress !== NULL_ADDRESS) {\n      this.setState({ missions: newMissions })\n\n      for (let i = 0, l = missions.length; i < l; i += 1) {\n        Promise.all([\n          eth.getRequirementAchieved(missions[i].order, props.selectedAddress),\n          eth.getFilled(missions[i].orderHash),\n        ]).then(([requirementAchieved, filled]) => {\n          newMissions[i].fetching = false\n          newMissions[i].requirementAchieved = requirementAchieved\n          newMissions[i].filled = filled\n          newMissions[i].active =\n            !requirementAchieved.includes(false) && \n            filled < hexToNumber(missions[i].order.takerAssetAmount)\n          this.setState({ missions: newMissions })\n        })\n      }\n    }\n  }\n\n  onGetReward = async (misisonIndex) => {\n    const { missions } = this.state\n    const newMissions = missions\n\n    if (newMissions[misisonIndex].active) {\n      try {\n        const { tx, txSignature } = await eth.signZeroExTransaction(\n          newMissions[misisonIndex].order,\n          newMissions[misisonIndex].orderSignature,\n        )\n  \n        const { txHash } = await eth.sendExecuteTransaction(tx, txSignature)\n  \n        newMissions[misisonIndex].txHash = txHash\n  \n        this.setState({ missions: newMissions })\n      } catch (e) {\n        console.error(e)\n      }\n    }\n  }\n\n  render() {\n    const { missions } = this.state\n\n    return <Layout {...this.props}>\n      <Missions title=\"ðŸ”¥ LootHunt Airdrop\" missions={missions} onGetReward={this.onGetReward} />\n    </Layout>\n  }\n}\n\nexport default IndexPage"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkCA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAMA;AAAA;AANA;AAAA;AACA;AADA;AAAA;AAWA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAhBA;AAAA;AACA;AADA;AAAA;AAAA;AAiBA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAnCA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAFA;AAQA;AACA;;;;;;AACA;;;;;;;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAFA;AAIA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAfA;AACA;AAEA;AAAA;AAaA;AACA;AACA;;;;;;;;;;;;;;;;;AAwBA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;AA/DA;AACA;AAiEA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}